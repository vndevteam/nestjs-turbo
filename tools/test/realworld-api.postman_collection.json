{
  "info": {
    "_postman_id": "ecdf0a01-3579-4cad-a0f9-b235c3005d76",
    "name": "realworld-api",
    "description": "Collection for testing the Realworld API\n\n[https://github.com/vndevteam/nestjs-turbo/tree/develop/apps/realworld-api](https://github.com/vndevteam/nestjs-turbo/tree/develop/apps/realworld-api)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "1243708"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (!(pm.environment.get(\"isIntegrationTest\"))) {",
                  "    var responseJSON = pm.response.json();",
                  "",
                  "    pm.test('Response contains \"user\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('user');",
                  "    });",
                  "",
                  "    var user = responseJSON.user || {};",
                  "",
                  "    pm.test('User has \"email\" property', function () {",
                  "        pm.expect(user).to.have.property('email');",
                  "    });",
                  "    pm.test('User has \"username\" property', function () {",
                  "        pm.expect(user).to.have.property('username');",
                  "    });",
                  "    pm.test('User has \"bio\" property', function () {",
                  "        pm.expect(user).to.have.property('bio');",
                  "    });",
                  "    pm.test('User has \"image\" property', function () {",
                  "        pm.expect(user).to.have.property('image');",
                  "    });",
                  "    pm.test('User has \"token\" property', function () {",
                  "        pm.expect(user).to.have.property('token');",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": ["{{APIURL}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "// Check if the response contains the \"user\" property",
                  "pm.test('Response contains \"user\" property', () => {",
                  "    pm.expect(responseJSON).to.have.property('user');",
                  "});",
                  "",
                  "// Check if the \"user\" property has the required fields",
                  "pm.test('User has \"email\" property', () => {",
                  "    pm.expect(responseJSON.user).to.have.property('email');",
                  "});",
                  "",
                  "pm.test('User has \"username\" property', () => {",
                  "    pm.expect(responseJSON.user).to.have.property('username');",
                  "});",
                  "",
                  "pm.test('User has \"bio\" property', () => {",
                  "    pm.expect(responseJSON.user).to.have.property('bio');",
                  "});",
                  "",
                  "pm.test('User has \"image\" property', () => {",
                  "    pm.expect(responseJSON.user).to.have.property('image');",
                  "});",
                  "",
                  "pm.test('User has \"token\" property', () => {",
                  "    pm.expect(responseJSON.user).to.have.property('token');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": ["{{APIURL}}"],
              "path": ["users", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"user\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('user');",
                  "});",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "pm.test('User has \"email\" property', function () {",
                  "    pm.expect(user).to.have.property('email');",
                  "});",
                  "pm.test('User has \"username\" property', function () {",
                  "    pm.expect(user).to.have.property('username');",
                  "});",
                  "pm.test('User has \"bio\" property', function () {",
                  "    pm.expect(user).to.have.property('bio');",
                  "});",
                  "pm.test('User has \"image\" property', function () {",
                  "    pm.expect(user).to.have.property('image');",
                  "});",
                  "pm.test('User has \"token\" property', function () {",
                  "    pm.expect(user).to.have.property('token');",
                  "});",
                  "",
                  "if(user.token){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "pm.test('Global variable \"token\" has been set', function () {",
                  "    pm.expect(pm.globals.get('token')).to.equal(user.token);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": ["{{APIURL}}"],
              "path": ["users", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response contains user property\", function () {",
                  "    pm.expect(responseBody).to.include(\"user\");",
                  "});",
                  "",
                  "var user = pm.response.json().user || {};",
                  "",
                  "pm.test(\"User has email property\", function () {",
                  "    pm.expect(user).to.have.property('email');",
                  "});",
                  "",
                  "pm.test(\"User has username property\", function () {",
                  "    pm.expect(user).to.have.property('username');",
                  "});",
                  "",
                  "pm.test(\"User has bio property\", function () {",
                  "    pm.expect(user).to.have.property('bio');",
                  "});",
                  "",
                  "pm.test(\"User has image property\", function () {",
                  "    pm.expect(user).to.have.property('image');",
                  "});",
                  "",
                  "pm.test(\"User has token property\", function () {",
                  "    pm.expect(user).to.have.property('token');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/user",
              "host": ["{{APIURL}}"],
              "path": ["user"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response contains \"user\" property', function () {",
                  "    const responseJSON = pm.response.json();",
                  "    pm.expect(responseJSON).to.have.property('user');",
                  "",
                  "    const user = responseJSON.user || {};",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('bio');",
                  "    pm.expect(user).to.have.property('image');",
                  "    pm.expect(user).to.have.property('token');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/user",
              "host": ["{{APIURL}}"],
              "path": ["user"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains \"articles\" property', function () {",
                  "    pm.expect(pm.response.json()).to.have.property('articles');",
                  "});",
                  "",
                  "pm.test('Response contains \"articlesCount\" property', function () {",
                  "    pm.expect(pm.response.json()).to.have.property('articlesCount');",
                  "});",
                  "",
                  "pm.test('articlesCount is an integer', function () {",
                  "    pm.expect(pm.response.json().articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Articles properties are valid', function () {",
                  "    pm.response.json().articles.forEach((article) => {",
                  "        pm.expect(article).to.have.property('title');",
                  "        pm.expect(article).to.have.property('slug');",
                  "        pm.expect(article).to.have.property('createdAt').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        pm.expect(article).to.have.property('updatedAt').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        pm.expect(article).to.have.property('description');",
                  "        pm.expect(article).to.have.property('tagList').that.is.an('array');",
                  "        pm.expect(article).to.have.property('author');",
                  "        pm.expect(article).to.have.property('favorited');",
                  "        pm.expect(article).to.have.property('favoritesCount').that.is.a('number');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test(\"Response contains 'articles' property\", function () {",
                  "    pm.expect(responseJSON).to.have.property('articles');",
                  "});",
                  "",
                  "pm.test(\"Response contains 'articlesCount' property\", function () {",
                  "    pm.expect(responseJSON).to.have.property('articlesCount');",
                  "});",
                  "",
                  "pm.test(\"articlesCount is an integer\", function () {",
                  "    pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "if(responseJSON.articles.length > 0){",
                  "    var article = responseJSON.articles[0];",
                  "",
                  "    pm.test(\"Article has 'title' property\", function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'slug' property\", function () {",
                  "        pm.expect(article).to.have.property('slug');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'createdAt' property as an ISO 8601 timestamp\", function () {",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'updatedAt' property as an ISO 8601 timestamp\", function () {",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'description' property\", function () {",
                  "        pm.expect(article).to.have.property('description');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'tagList' property\", function () {",
                  "        pm.expect(article).to.have.property('tagList');",
                  "    });",
                  "",
                  "    pm.test(\"Article's 'tagList' property is an Array\", function () {",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'author' property\", function () {",
                  "        pm.expect(article).to.have.property('author');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'favorited' property\", function () {",
                  "        pm.expect(article).to.have.property('favorited');",
                  "    });",
                  "",
                  "    pm.test(\"Article has 'favoritesCount' property\", function () {",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "    });",
                  "",
                  "    pm.test(\"favoritesCount is an integer\", function () {",
                  "        pm.expect(article.favoritesCount).to.be.a('number');",
                  "    });",
                  "} else {",
                  "    pm.test(\"articlesCount is 0 when feed is empty\", function () {",
                  "        pm.expect(responseJSON.articlesCount).to.equal(0);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?author=johnjacob",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"articles\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('articles');",
                  "});",
                  "pm.test('Response contains \"articlesCount\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('articlesCount');",
                  "});",
                  "pm.test('articlesCount is an integer', function () {",
                  "    pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "if (responseJSON.articles.length) {",
                  "    var article = responseJSON.articles[0];",
                  "",
                  "    pm.test('Article has \"title\" property', function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "    });",
                  "    pm.test('Article has \"slug\" property', function () {",
                  "        pm.expect(article).to.have.property('slug');",
                  "    });",
                  "    pm.test('Article has \"createdAt\" property', function () {",
                  "        pm.expect(article).to.have.property('createdAt');",
                  "    });",
                  "    pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"updatedAt\" property', function () {",
                  "        pm.expect(article).to.have.property('updatedAt');",
                  "    });",
                  "    pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"description\" property', function () {",
                  "        pm.expect(article).to.have.property('description');",
                  "    });",
                  "    pm.test('Article has \"tagList\" property', function () {",
                  "        pm.expect(article).to.have.property('tagList');",
                  "    });",
                  "    pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "    });",
                  "    pm.test('Article has \"author\" property', function () {",
                  "        pm.expect(article).to.have.property('author');",
                  "    });",
                  "    pm.test('Article has \"favorited\" property', function () {",
                  "        pm.expect(article).to.have.property('favorited');",
                  "    });",
                  "    pm.test('Article has \"favoritesCount\" property', function () {",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "    });",
                  "    pm.test('favoritesCount is an integer', function () {",
                  "        pm.expect(article.favoritesCount).to.be.a('number');",
                  "    });",
                  "} else {",
                  "    pm.test('articlesCount is 0 when feed is empty', function () {",
                  "        pm.expect(responseJSON.articlesCount).to.equal(0);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "favorited",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains \"articles\" property', function() {",
                  "    pm.expect(pm.response.json()).to.have.property('articles');",
                  "});",
                  "",
                  "pm.test('Response contains \"articlesCount\" property', function() {",
                  "    pm.expect(pm.response.json()).to.have.property('articlesCount');",
                  "    pm.expect(pm.response.json().articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Article properties are valid', function() {",
                  "    var article = pm.response.json().articles[0];",
                  "    pm.expect(article).to.have.property('title');",
                  "    pm.expect(article).to.have.property('slug');",
                  "    pm.expect(article).to.have.property('createdAt').that.is.a('string').and.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
                  "    pm.expect(article).to.have.property('updatedAt').that.is.a('string').and.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
                  "    pm.expect(article).to.have.property('description');",
                  "    pm.expect(article).to.have.property('tagList').that.is.an('array');",
                  "    pm.expect(article).to.have.property('author').that.is.an('object');",
                  "    pm.expect(article).to.have.property('favorited');",
                  "    pm.expect(article).to.have.property('favoritesCount').that.is.a('number');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles, Favorite, Comments",
      "item": [
        {
          "name": "Create Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.expect(responseJSON).to.have.property('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "pm.expect(article).to.have.property('title');",
                  "pm.expect(article).to.have.property('slug');",
                  "pm.globals.set('slug', article.slug);",
                  "",
                  "pm.expect(article).to.have.property('body');",
                  "pm.expect(article).to.have.property('createdAt');",
                  "pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "pm.expect(article).to.have.property('updatedAt');",
                  "pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "pm.expect(article).to.have.property('description');",
                  "pm.expect(article).to.have.property('tagList');",
                  "pm.expect(article.tagList).to.be.an('array');",
                  "pm.expect(article).to.have.property('author');",
                  "pm.expect(article).to.have.property('favorited');",
                  "pm.expect(article).to.have.property('favoritesCount');",
                  "pm.expect(article.favoritesCount).to.be.a('number');"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"training\", \"dragons\"]}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "Feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains expected properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('articles');",
                  "    pm.expect(jsonData).to.have.property('articlesCount');",
                  "    pm.expect(jsonData.articlesCount).to.be.a('number');",
                  "",
                  "    if (jsonData.articles.length > 0) {",
                  "        var article = jsonData.articles[0];",
                  "",
                  "        pm.expect(article).to.have.property('title');",
                  "        pm.expect(article).to.have.property('slug');",
                  "        pm.expect(article).to.have.property('createdAt').and.to.match(/^[\\d]{4}-(0[1-9]|1[0-2])-([0-2][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9]{3}Z?$/);",
                  "        pm.expect(article).to.have.property('updatedAt').and.to.match(/^[\\d]{4}-(0[1-9]|1[0-2])-([0-2][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9]{3}Z?$/);",
                  "        pm.expect(article).to.have.property('description');",
                  "        pm.expect(article).to.have.property('tagList').that.is.an('array');",
                  "        pm.expect(article).to.have.property('author');",
                  "        pm.expect(article).to.have.property('favorited');",
                  "        pm.expect(article).to.have.property('favoritesCount').and.to.be.a('number');",
                  "    } else {",
                  "        pm.expect(jsonData.articlesCount).to.equal(0);",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles/feed",
              "host": ["{{APIURL}}"],
              "path": ["articles", "feed"]
            }
          },
          "response": []
        },
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    var responseJSON = pm.response.json();",
                  "",
                  "    pm.test(\"Response contains 'articles' property\", function () {",
                  "        pm.expect(responseJSON).to.have.property('articles');",
                  "    });",
                  "    pm.test(\"Response contains 'articlesCount' property\", function () {",
                  "        pm.expect(responseJSON).to.have.property('articlesCount');",
                  "    });",
                  "    pm.test(\"articlesCount is an integer\", function () {",
                  "        pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "    });",
                  "",
                  "    if (responseJSON.articles.length) {",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        pm.test(\"Article has 'title' property\", function () {",
                  "            pm.expect(article).to.have.property('title');",
                  "        });",
                  "        pm.test(\"Article has 'slug' property\", function () {",
                  "            pm.expect(article).to.have.property('slug');",
                  "        });",
                  "        pm.test(\"Article has 'createdAt' property\", function () {",
                  "            pm.expect(article).to.have.property('createdAt');",
                  "        });",
                  "        pm.test(\"Article's 'createdAt' property is an ISO 8601 timestamp\", function () {",
                  "            pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        });",
                  "        pm.test(\"Article has 'updatedAt' property\", function () {",
                  "            pm.expect(article).to.have.property('updatedAt');",
                  "        });",
                  "        pm.test(\"Article's 'updatedAt' property is an ISO 8601 timestamp\", function () {",
                  "            pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        });",
                  "        pm.test(\"Article has 'description' property\", function () {",
                  "            pm.expect(article).to.have.property('description');",
                  "        });",
                  "        pm.test(\"Article has 'tagList' property\", function () {",
                  "            pm.expect(article).to.have.property('tagList');",
                  "        });",
                  "        pm.test(\"Article's 'tagList' property is an Array\", function () {",
                  "            pm.expect(article.tagList).to.be.an('array');",
                  "        });",
                  "        pm.test(\"Article has 'author' property\", function () {",
                  "            pm.expect(article).to.have.property('author');",
                  "        });",
                  "        pm.test(\"Article has 'favorited' property\", function () {",
                  "            pm.expect(article).to.have.property('favorited');",
                  "        });",
                  "        pm.test(\"Article has 'favoritesCount' property\", function () {",
                  "            pm.expect(article).to.have.property('favoritesCount');",
                  "        });",
                  "        pm.test(\"favoritesCount is an integer\", function () {",
                  "            pm.expect(article.favoritesCount).to.be.a('number');",
                  "        });",
                  "    } else {",
                  "        pm.test(\"articlesCount is 0 when feed is empty\", function () {",
                  "            pm.expect(responseJSON.articlesCount).to.equal(0);",
                  "        });",
                  "    }",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "All Articles with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains expected properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('articles');",
                  "    pm.expect(jsonData).to.have.property('articlesCount');",
                  "    pm.expect(jsonData.articlesCount).to.be.a('number');",
                  "    ",
                  "    if (jsonData.articles.length > 0) {",
                  "        var article = jsonData.articles[0];",
                  "        pm.expect(article).to.have.property('title');",
                  "        pm.expect(article).to.have.property('slug');",
                  "        pm.expect(article).to.have.property('createdAt').and.to.match(/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).(\\d{3})Z$/);",
                  "        pm.expect(article).to.have.property('updatedAt').and.to.match(/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).(\\d{3})Z$/);",
                  "        pm.expect(article).to.have.property('description');",
                  "        pm.expect(article).to.have.property('tagList').that.is.an('array');",
                  "        pm.expect(article).to.have.property('author');",
                  "        pm.expect(article).to.have.property('favorited');",
                  "        pm.expect(article).to.have.property('favoritesCount').that.is.a('number');",
                  "    } else {",
                  "        pm.expect(jsonData.articlesCount).to.equal(0);",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"articles\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('articles');",
                  "});",
                  "pm.test('Response contains \"articlesCount\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('articlesCount');",
                  "});",
                  "pm.test('articlesCount is an integer', function () {",
                  "    pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "if(responseJSON.articles.length > 0){",
                  "    var article = responseJSON.articles[0];",
                  "",
                  "    pm.test('Article has \"title\" property', function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "    });",
                  "    pm.test('Article has \"slug\" property', function () {",
                  "        pm.expect(article).to.have.property('slug');",
                  "    });",
                  "    pm.test('Article has \"createdAt\" property', function () {",
                  "        pm.expect(article).to.have.property('createdAt');",
                  "    });",
                  "    pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"updatedAt\" property', function () {",
                  "        pm.expect(article).to.have.property('updatedAt');",
                  "    });",
                  "    pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"description\" property', function () {",
                  "        pm.expect(article).to.have.property('description');",
                  "    });",
                  "    pm.test('Article has \"tagList\" property', function () {",
                  "        pm.expect(article).to.have.property('tagList');",
                  "    });",
                  "    pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "    });",
                  "    pm.test('Article has \"author\" property', function () {",
                  "        pm.expect(article).to.have.property('author');",
                  "    });",
                  "    pm.test('Article has \"favorited\" property', function () {",
                  "        pm.expect(article).to.have.property('favorited');",
                  "    });",
                  "    pm.test('Article has \"favoritesCount\" property', function () {",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "    });",
                  "    pm.test('favoritesCount is an integer', function () {",
                  "        pm.expect(article.favoritesCount).to.be.a('number');",
                  "    });",
                  "} else {",
                  "    pm.test('articlesCount is 0 when feed is empty', function () {",
                  "        pm.expect(responseJSON.articlesCount).to.equal(0);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body must contain 'articles' and 'articlesCount'\", function () {",
                  "    const responseJSON = pm.response.json();",
                  "    pm.expect(responseJSON).to.have.property('articles');",
                  "    pm.expect(responseJSON).to.have.property('articlesCount');",
                  "    pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "});",
                  "",
                  "if (pm.response.json().articles.length > 0) {",
                  "    const article = pm.response.json().articles[0];",
                  "    pm.test(\"Article must have required properties\", function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "        pm.expect(article).to.have.property('slug');",
                  "        pm.expect(article).to.have.property('createdAt');",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        pm.expect(article).to.have.property('updatedAt');",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        pm.expect(article).to.have.property('description');",
                  "        pm.expect(article).to.have.property('tagList');",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "        pm.expect(article).to.have.property('author');",
                  "        pm.expect(article).to.have.property('favorited');",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "        pm.expect(article.favoritesCount).to.be.a('number');",
                  "    });",
                  "} else {",
                  "    pm.test(\"articlesCount should be 0 when feed is empty\", function () {",
                  "        pm.expect(pm.response.json().articlesCount).to.equal(0);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Single Article by slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"article\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('article');",
                  "});",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "pm.test('Article has \"title\" property', function () {",
                  "    pm.expect(article).to.have.property('title');",
                  "});",
                  "",
                  "pm.test('Article has \"slug\" property', function () {",
                  "    pm.expect(article).to.have.property('slug');",
                  "});",
                  "",
                  "pm.test('Article has \"body\" property', function () {",
                  "    pm.expect(article).to.have.property('body');",
                  "});",
                  "",
                  "pm.test('Article has \"createdAt\" property', function () {",
                  "    pm.expect(article).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Article has \"updatedAt\" property', function () {",
                  "    pm.expect(article).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Article has \"description\" property', function () {",
                  "    pm.expect(article).to.have.property('description');",
                  "});",
                  "",
                  "pm.test('Article has \"tagList\" property', function () {",
                  "    pm.expect(article).to.have.property('tagList');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "    pm.expect(article.tagList).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Article has \"author\" property', function () {",
                  "    pm.expect(article).to.have.property('author');",
                  "});",
                  "",
                  "pm.test('Article has \"favorited\" property', function () {",
                  "    pm.expect(article).to.have.property('favorited');",
                  "});",
                  "",
                  "pm.test('Article has \"favoritesCount\" property', function () {",
                  "    pm.expect(article).to.have.property('favoritesCount');",
                  "});",
                  "",
                  "pm.test('favoritesCount is an integer', function () {",
                  "    pm.expect(article.favoritesCount).to.be.a('number');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}"]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body must contain required properties\", function () {",
                  "    const responseJSON = pm.response.json();",
                  "    pm.expect(responseJSON).to.have.property('articles');",
                  "    pm.expect(responseJSON).to.have.property('articlesCount').that.is.a('number');",
                  "    const article = responseJSON.articles[0];",
                  "    pm.expect(article).to.have.property('title');",
                  "    pm.expect(article).to.have.property('slug');",
                  "    pm.expect(article).to.have.property('createdAt').that.matches(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    pm.expect(article).to.have.property('updatedAt').that.matches(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    pm.expect(article).to.have.property('description');",
                  "    pm.expect(article).to.have.property('tagList').that.is.an('array').that.includes('dragons', 'training');",
                  "    pm.expect(article).to.have.property('author');",
                  "    pm.expect(article).to.have.property('favorited');",
                  "    pm.expect(article).to.have.property('favoritesCount').that.is.a('number');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (!(pm.variables.get('isIntegrationTest'))) {",
                  "    var responseJSON = pm.response.json();",
                  "",
                  "    pm.expect(responseJSON).to.have.property('article');",
                  "",
                  "    var article = responseJSON.article || {};",
                  "",
                  "    pm.expect(article).to.have.property('title');",
                  "    pm.expect(article).to.have.property('slug');",
                  "    pm.expect(article).to.have.property('body');",
                  "    pm.expect(article).to.have.property('createdAt');",
                  "    pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    pm.expect(article).to.have.property('updatedAt');",
                  "    pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    pm.expect(article).to.have.property('description');",
                  "    pm.expect(article).to.have.property('tagList');",
                  "    pm.expect(article.tagList).to.be.an('array');",
                  "    pm.expect(article).to.have.property('author');",
                  "    pm.expect(article).to.have.property('favorited');",
                  "    pm.expect(article).to.have.property('favoritesCount');",
                  "    pm.expect(article.favoritesCount).to.be.a('number');",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"body\":\"With two hands\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}"]
            }
          },
          "response": []
        },
        {
          "name": "Favorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"article\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('article');",
                  "});",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "pm.test('Article has \"title\" property', function () {",
                  "    pm.expect(article).to.have.property('title');",
                  "});",
                  "pm.test('Article has \"slug\" property', function () {",
                  "    pm.expect(article).to.have.property('slug');",
                  "});",
                  "pm.test('Article has \"body\" property', function () {",
                  "    pm.expect(article).to.have.property('body');",
                  "});",
                  "pm.test('Article has \"createdAt\" property', function () {",
                  "    pm.expect(article).to.have.property('createdAt');",
                  "});",
                  "pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "pm.test('Article has \"updatedAt\" property', function () {",
                  "    pm.expect(article).to.have.property('updatedAt');",
                  "});",
                  "pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "pm.test('Article has \"description\" property', function () {",
                  "    pm.expect(article).to.have.property('description');",
                  "});",
                  "pm.test('Article has \"tagList\" property', function () {",
                  "    pm.expect(article).to.have.property('tagList');",
                  "});",
                  "pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "    pm.expect(article.tagList).to.be.an('array');",
                  "});",
                  "pm.test('Article has \"author\" property', function () {",
                  "    pm.expect(article).to.have.property('author');",
                  "});",
                  "pm.test('Article has \"favorited\" property', function () {",
                  "    pm.expect(article).to.have.property('favorited');",
                  "});",
                  "pm.test(\"Article's 'favorited' property is true\", function () {",
                  "    pm.expect(article.favorited).to.be.true;",
                  "});",
                  "pm.test('Article has \"favoritesCount\" property', function () {",
                  "    pm.expect(article).to.have.property('favoritesCount');",
                  "});",
                  "pm.test('favoritesCount is an integer', function () {",
                  "    pm.expect(article.favoritesCount).to.be.a('number');",
                  "});",
                  "pm.test(\"Article's 'favoritesCount' property is greater than 0\", function () {",
                  "    pm.expect(article.favoritesCount).to.be.above(0);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "favorite"]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    var responseJSON = pm.response.json();",
                  "    var article = responseJSON.articles[0];",
                  "    pm.test('Response contains \"articles\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('articles');",
                  "    });",
                  "    pm.test('Response contains \"articlesCount\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('articlesCount');",
                  "    });",
                  "    pm.test('articlesCount is an integer', function () {",
                  "        pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "    });",
                  "    pm.test('Article has \"title\" property', function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "    });",
                  "    pm.test('Article has \"slug\" property', function () {",
                  "        pm.expect(article).to.have.property('slug');",
                  "    });",
                  "    pm.test('Article has \"createdAt\" property', function () {",
                  "        pm.expect(article).to.have.property('createdAt');",
                  "    });",
                  "    pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"updatedAt\" property', function () {",
                  "        pm.expect(article).to.have.property('updatedAt');",
                  "    });",
                  "    pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"description\" property', function () {",
                  "        pm.expect(article).to.have.property('description');",
                  "    });",
                  "    pm.test('Article has \"tagList\" property', function () {",
                  "        pm.expect(article).to.have.property('tagList');",
                  "    });",
                  "    pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "    });",
                  "    pm.test('Article has \"author\" property', function () {",
                  "        pm.expect(article).to.have.property('author');",
                  "    });",
                  "    pm.test('Article has \"favorited\" property', function () {",
                  "        pm.expect(article).to.have.property('favorited');",
                  "    });",
                  "    pm.test('Article has \"favoritesCount\" property', function () {",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "    });",
                  "    pm.test('favoritesCount is 1', function () {",
                  "        pm.expect(article.favoritesCount).to.equal(1);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "favorited",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    var responseJSON = pm.response.json();",
                  "    var article = responseJSON.articles[0];",
                  "    pm.test('Response contains \"articles\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('articles');",
                  "    });",
                  "    pm.test('Response contains \"articlesCount\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('articlesCount');",
                  "    });",
                  "    pm.test('articlesCount is an integer', function () {",
                  "        pm.expect(responseJSON.articlesCount).to.be.a('number');",
                  "    });",
                  "    pm.test('Article has \"title\" property', function () {",
                  "        pm.expect(article).to.have.property('title');",
                  "    });",
                  "    pm.test('Article has \"slug\" property', function () {",
                  "        pm.expect(article).to.have.property('slug');",
                  "    });",
                  "    pm.test('Article has \"createdAt\" property', function () {",
                  "        pm.expect(article).to.have.property('createdAt');",
                  "    });",
                  "    pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"updatedAt\" property', function () {",
                  "        pm.expect(article).to.have.property('updatedAt');",
                  "    });",
                  "    pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "        pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "    });",
                  "    pm.test('Article has \"description\" property', function () {",
                  "        pm.expect(article).to.have.property('description');",
                  "    });",
                  "    pm.test('Article has \"tagList\" property', function () {",
                  "        pm.expect(article).to.have.property('tagList');",
                  "    });",
                  "    pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "        pm.expect(article.tagList).to.be.an('array');",
                  "    });",
                  "    pm.test('Article has \"author\" property', function () {",
                  "        pm.expect(article).to.have.property('author');",
                  "    });",
                  "    pm.test('Article has \"favorited\" property', function () {",
                  "        pm.expect(article).to.have.property('favorited');",
                  "    });",
                  "    pm.test('Article has \"favoritesCount\" property', function () {",
                  "        pm.expect(article).to.have.property('favoritesCount');",
                  "    });",
                  "    pm.test('favoritesCount is 1', function () {",
                  "        pm.expect(article.favoritesCount).to.equal(1);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles?favorited={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "favorited",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unfavorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.test('Response contains \"article\" property', function () {",
                  "    pm.expect(responseJSON).to.have.property('article');",
                  "});",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "pm.test('Article has \"title\" property', function () {",
                  "    pm.expect(article).to.have.property('title');",
                  "});",
                  "",
                  "pm.test('Article has \"slug\" property', function () {",
                  "    pm.expect(article).to.have.property('slug');",
                  "});",
                  "",
                  "pm.test('Article has \"body\" property', function () {",
                  "    pm.expect(article).to.have.property('body');",
                  "});",
                  "",
                  "pm.test('Article has \"createdAt\" property', function () {",
                  "    pm.expect(article).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"createdAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Article has \"updatedAt\" property', function () {",
                  "    pm.expect(article).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"updatedAt\" property is an ISO 8601 timestamp', function () {",
                  "    pm.expect(article.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Article has \"description\" property', function () {",
                  "    pm.expect(article).to.have.property('description');",
                  "});",
                  "",
                  "pm.test('Article has \"tagList\" property', function () {",
                  "    pm.expect(article).to.have.property('tagList');",
                  "});",
                  "",
                  "pm.test('Article\\'s \"tagList\" property is an Array', function () {",
                  "    pm.expect(article.tagList).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Article has \"author\" property', function () {",
                  "    pm.expect(article).to.have.property('author');",
                  "});",
                  "",
                  "pm.test('Article has \"favorited\" property', function () {",
                  "    pm.expect(article).to.have.property('favorited');",
                  "});",
                  "",
                  "pm.test('Article has \"favoritesCount\" property', function () {",
                  "    pm.expect(article).to.have.property('favoritesCount');",
                  "});",
                  "",
                  "pm.test('favoritesCount is an integer', function () {",
                  "    pm.expect(article.favoritesCount).to.be.a('number');",
                  "});",
                  "",
                  "pm.test(\"Article's \\\"favorited\\\" property is false\", function () {",
                  "    pm.expect(article.favorited).to.be.false;",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "favorite"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = pm.response.json();",
                  "",
                  "pm.expect(responseJSON).to.have.property('comment');",
                  "",
                  "var comment = responseJSON.comment || {};",
                  "",
                  "pm.globals.set('commentId', comment.id);",
                  "",
                  "pm.expect(comment).to.have.property('id');",
                  "pm.expect(comment).to.have.property('body');",
                  "pm.expect(comment).to.have.property('createdAt').and.to.be.a('string').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "pm.expect(comment).to.have.property('updatedAt').and.to.be.a('string').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "pm.expect(comment).to.have.property('author');",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "All Comments for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains \"comments\" property', function () {",
                  "    pm.expect(pm.response.json()).to.have.property('comments');",
                  "});",
                  "",
                  "pm.test('Comment has \"id\" property', function () {",
                  "    pm.expect(pm.response.json().comments[0]).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Comment has \"body\" property', function () {",
                  "    pm.expect(pm.response.json().comments[0]).to.have.property('body');",
                  "});",
                  "",
                  "pm.test('Comment has \"createdAt\" property and is an ISO 8601 timestamp', function () {",
                  "    pm.expect(pm.response.json().comments[0]).to.have.property('createdAt').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Comment has \"updatedAt\" property and is an ISO 8601 timestamp', function () {",
                  "    pm.expect(pm.response.json().comments[0]).to.have.property('updatedAt').and.to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "});",
                  "",
                  "pm.test('Comment has \"author\" property', function () {",
                  "    pm.expect(pm.response.json().comments[0]).to.have.property('author');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "All Comments for Article without login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.test(\"Response contains 'comments' property\", function () {",
                  "        pm.expect(jsonData).to.have.property('comments');",
                  "    });",
                  "",
                  "    if (jsonData.comments.length > 0) {",
                  "        var comment = jsonData.comments[0];",
                  "",
                  "        pm.test(\"Comment has 'id' property\", function () {",
                  "            pm.expect(comment).to.have.property('id');",
                  "        });",
                  "        pm.test(\"Comment has 'body' property\", function () {",
                  "            pm.expect(comment).to.have.property('body');",
                  "        });",
                  "        pm.test(\"Comment has 'createdAt' property\", function () {",
                  "            pm.expect(comment).to.have.property('createdAt');",
                  "        });",
                  "        pm.test(\"createdAt property is an ISO 8601 timestamp\", function () {",
                  "            pm.expect(comment.createdAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        });",
                  "        pm.test(\"Comment has 'updatedAt' property\", function () {",
                  "            pm.expect(comment).to.have.property('updatedAt');",
                  "        });",
                  "        pm.test(\"updatedAt property is an ISO 8601 timestamp\", function () {",
                  "            pm.expect(comment.updatedAt).to.match(/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
                  "        });",
                  "        pm.test(\"Comment has 'author' property\", function () {",
                  "            pm.expect(comment).to.have.property('author');",
                  "        });",
                  "    }",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment for Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments/{{commentId}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}", "comments", "{{commentId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{slug}}"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [
        {
          "name": "Register Celeb",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (!(pm.environment.get(\"isIntegrationTest\"))) {",
                  "    var responseJSON = pm.response.json();",
                  "",
                  "    pm.test('Response contains \"user\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('user');",
                  "    });",
                  "",
                  "    var user = responseJSON.user || {};",
                  "",
                  "    pm.test('User has \"email\" property', function () {",
                  "        pm.expect(user).to.have.property('email');",
                  "    });",
                  "    pm.test('User has \"username\" property', function () {",
                  "        pm.expect(user).to.have.property('username');",
                  "    });",
                  "    pm.test('User has \"bio\" property', function () {",
                  "        pm.expect(user).to.have.property('bio');",
                  "    });",
                  "    pm.test('User has \"image\" property', function () {",
                  "        pm.expect(user).to.have.property('image');",
                  "    });",
                  "    pm.test('User has \"token\" property', function () {",
                  "        pm.expect(user).to.have.property('token');",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"celeb_{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"celeb_{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": ["{{APIURL}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.environment.get('isIntegrationTest') !== 'true') {",
                  "    pm.test('Response code is 200 OK', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    if (pm.response.code === 200) {",
                  "        var responseJSON = pm.response.json();",
                  "",
                  "        pm.test('Response contains \"profile\" property', function () {",
                  "            pm.expect(responseJSON).to.have.property('profile');",
                  "        });",
                  "",
                  "        var profile = responseJSON.profile || {};",
                  "",
                  "        pm.test('Profile has \"username\" property', function () {",
                  "            pm.expect(profile).to.have.property('username');",
                  "        });",
                  "        pm.test('Profile has \"bio\" property', function () {",
                  "            pm.expect(profile).to.have.property('bio');",
                  "        });",
                  "        pm.test('Profile has \"image\" property', function () {",
                  "            pm.expect(profile).to.have.property('image');",
                  "        });",
                  "        pm.test('Profile has \"following\" property', function () {",
                  "            pm.expect(profile).to.have.property('following');",
                  "        });",
                  "    }",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}"]
            }
          },
          "response": []
        },
        {
          "name": "Follow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var responseJSON = pm.response.json();",
                  "    pm.expect(responseJSON).to.have.property('profile');",
                  "    var profile = responseJSON.profile || {};",
                  "    pm.expect(profile).to.have.property('username');",
                  "    pm.expect(profile).to.have.property('bio');",
                  "    pm.expect(profile).to.have.property('image');",
                  "    pm.expect(profile).to.have.property('following', true);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}", "follow"]
            }
          },
          "response": []
        },
        {
          "name": "Unfollow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var responseJSON = pm.response.json();",
                  "    pm.expect(responseJSON).to.have.property('profile');",
                  "    var profile = responseJSON.profile || {};",
                  "    pm.expect(profile).to.have.property('username');",
                  "    pm.expect(profile).to.have.property('bio');",
                  "    pm.expect(profile).to.have.property('image');",
                  "    pm.expect(profile).to.have.property('following', false);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}", "follow"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "All Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.to.have.status(200)) {",
                  "    var responseJSON = pm.response.json();",
                  "    ",
                  "    pm.test('Response contains \"tags\" property', function () {",
                  "        pm.expect(responseJSON).to.have.property('tags');",
                  "    });",
                  "",
                  "    pm.test('\"tags\" property returned as array', function () {",
                  "        pm.expect(responseJSON.tags).to.be.an('array');",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "url": {
              "raw": "{{APIURL}}/tags",
              "host": ["{{APIURL}}"],
              "path": ["tags"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
